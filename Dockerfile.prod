FROM node:20-alpine AS build

WORKDIR /app

COPY package.json /app
RUN npm install
RUN npm install -g dotenv-cli
COPY . /app
RUN npm run migrate:prod
RUN npm run generate-prisma-client
RUN npm run build
RUN npm prune --production

FROM node:20-alpine AS run

ENV NODE_ENV=production

# Copy the build artifacts from the build stage
# to the runtime stage's working directory
WORKDIR /app
COPY --from=build /app/build /app/build
COPY --from=build /app/package.json /app/package.json
COPY --from=build /app/node_modules /app/node_modules
COPY --from=build /app/prisma /app/prisma
COPY --from=build /app/.env.production /app/.env
RUN npx prisma generate
# The --from=build flag specifies that the files should be copied from the build stage
# The /app/build ./build syntax copies the contents of the build directory in the build stage
# to the same directory in the runtime stage.
# Similarly, for package.json, node_modules, and prisma.

# RUN ulimit -c unlimited
EXPOSE 3000
ENTRYPOINT ["node", "build"]
# docker build -f ./Dockerfile.prod -t shoot-or-not:latest .
# docker run -p 3000:3000 (Attached mode)
# docker rm
# docker container prune
# docker run -p 3000:3000 -d --rm --name shoot-or-not shoot-or-not:latest 